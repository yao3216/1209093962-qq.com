#include <iostream>
#include <cstdio>
#include <queue>
using namespace std;
struct node{
    int x,y;
};
int Map[6][6];
int visit[6][6];
node pre[6][6];
node spos;
int dir[4][2]={{1,0},{-1,0},{0,1},{0,-1}};

int Find(int x,int y)
{
    if(x>=0&&x<5&&y>=0&&y<5)
        return 1;
    return 0;
}

int main()
{
    for(int i=0;i<5;i++)
        for(int j=0;j<5;j++)
        scanf("%d",&Map[i][j]);
    spos.x=0;
    spos.y=0;
    queue<node>Q;
    Q.push(spos);
    node temp,temp1;
    int flag=0;
    while(!Q.empty())
    {
        temp=Q.front();
        Q.pop();
        if(temp.x==4&&temp.y==4)
        {
            node route[100];
            int xx=temp.x,yy=temp.y;
            temp1.x=xx;
            temp1.y=yy;
            int cnt=0;
            while(xx!=0||yy!=0)
            {
                route[cnt++]=temp1;
                temp1=pre[temp1.x][temp1.y];
                xx=temp1.x;
                yy=temp1.y;
            }
            cout<<"(0, 0)"<<endl;
            for(int i=cnt-1;i>=0;i--)
                cout<<'('<<route[i].x<<", "<<route[i].y<<')'<<endl;
            flag=1;
            break;
        }
        for(int i=0;i<4;i++)
        {
            temp1.x=temp.x+dir[i][0];
            temp1.y=temp.y+dir[i][1];
            if(Find(temp1.x,temp1.y)&&!visit[temp1.x][temp1.y]&&!Map[temp1.x][temp1.y])
            {
                pre[temp1.x][temp1.y]=temp;
                visit[temp1.x][temp1.y]=1;
                Q.push(temp1);
            }
        }
    }
    return 0;
}
/**
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
**/
